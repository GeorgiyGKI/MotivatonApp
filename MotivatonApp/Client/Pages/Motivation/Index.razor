@page "/"
@inject HttpClient Http

<PageTitle>Motivation</PageTitle>


@if (motivation == null)
{
   
}
else
{
    <div typewrite="" class="div-block-13">
        <div>
            <div deleting="500" typewriter="@motivation.Author | @motivation.Quote" color="#000" writing="200" class="udesly-typewriter-effect">...</div><div class="udesly-code-snippet w-embed w-script">
                <script>
                    !function () { "use strict"; class t { constructor(t, e, i = [], n = 2e3, s = "|", r = "black", o = 200, l = 500) { this.element = t, this.strings = i, this.period = n, this.currentIndex = 0, this.isDeleting = !1, this.text = "", this.textWrapper = document.createElement("span"), this.element.appendChild(this.textWrapper), this.writingMaxTime = o, this.deletingTime = l, this.appendCursor(e, s, r), this.tick() } appendCursor(t, n = "|", s = "black") { const r = document.createElement("span"); r.classList.add(`blinking-cursor-${t}`), r.textContent = n, this.element.appendChild(r), i(e(t, s)) } tick() { this.currentIndex = this.currentIndex % this.strings.length; const t = this.strings[this.currentIndex]; this.isDeleting ? this.text = t.substring(0, this.text.length - 1) : this.text = t.substring(0, this.text.length + 1), this.textWrapper.textContent = this.text; let e = this.writingMaxTime - 100 * Math.random(); this.isDeleting && (e /= 2), this.isDeleting || this.text != t ? this.isDeleting && "" === this.text && (this.isDeleting = !1, this.currentIndex++, e = this.deletingTime) : (e = this.period, this.isDeleting = !0), setTimeout(() => { this.tick() }, e) } } const e = (t, e) => `\n.blinking-cursor-${t} { color: ${e}; -webkit-animation: 1s blink step-end infinite; -moz-animation: 1s blink step-end infinite; -ms-animation: 1s blink step-end infinite; -o-animation: 1s blink step-end infinite; animation: 1s blink step-end infinite; } @@keyframes blink{from,to{color:transparent}50%{color:${e}}}@@-moz-keyframes blink{from,to{color:transparent}50%{color:${e}}}@@-webkit-keyframes blink{from,to{color:transparent}50%{color:${e}}}@@-ms-keyframes blink{from,to{color:transparent}50%{color:${e}}}@@-o-keyframes blink{from,to{color:transparent}50%{color:${e}}}\n`, i = t => { const e = document.createElement("style"); e.textContent = t, document.head.appendChild(e) }; document.currentScript.parentElement.parentElement.querySelectorAll("[typewriter]").forEach((e, i) => { const n = e.getAttribute("typewriter").split("|").map(t => t.trim()) || []; if (!n.length || "" == n[0]) return void console.error("Please insert some texts separated by |"); n.unshift(e.textContent), e.textContent = ""; const s = parseInt(e.getAttribute("period"), 10) || 1e3, r = e.getAttribute("cursor") || "|", o = e.getAttribute("color") || "black", l = parseInt(e.getAttribute("writing"), 10) || 200, a = parseInt(e.getAttribute("deleting"), 10) || 500; new t(e, i, n, s, r, o, l, a) }) }();
                </script>
            </div>
        </div>
    </div>
    <div class="div-block-14">
        <div class="udesly-code-snippet w-embed w-script">
            <script>
                !function () { "use strict"; class t { constructor(t, e, i = [], n = 2e3, s = "|", r = "black", o = 200, l = 500) { this.element = t, this.strings = i, this.period = n, this.currentIndex = 0, this.isDeleting = !1, this.text = "", this.textWrapper = document.createElement("span"), this.element.appendChild(this.textWrapper), this.writingMaxTime = o, this.deletingTime = l, this.appendCursor(e, s, r), this.tick() } appendCursor(t, n = "|", s = "black") { const r = document.createElement("span"); r.classList.add(`blinking-cursor-${t}`), r.textContent = n, this.element.appendChild(r), i(e(t, s)) } tick() { this.currentIndex = this.currentIndex % this.strings.length; const t = this.strings[this.currentIndex]; this.isDeleting ? this.text = t.substring(0, this.text.length - 1) : this.text = t.substring(0, this.text.length + 1), this.textWrapper.textContent = this.text; let e = this.writingMaxTime - 100 * Math.random(); this.isDeleting && (e /= 2), this.isDeleting || this.text != t ? this.isDeleting && "" === this.text && (this.isDeleting = !1, this.currentIndex++, e = this.deletingTime) : (e = this.period, this.isDeleting = !0), setTimeout(() => { this.tick() }, e) } } const e = (t, e) => `\n.blinking-cursor-${t} { color: ${e}; -webkit-animation: 1s blink step-end infinite; -moz-animation: 1s blink step-end infinite; -ms-animation: 1s blink step-end infinite; -o-animation: 1s blink step-end infinite; animation: 1s blink step-end infinite; } @@keyframes blink{from,to{color:transparent}50%{color:${e}}}@@-moz-keyframes blink{from,to{color:transparent}50%{color:${e}}}@@-webkit-keyframes blink{from,to{color:transparent}50%{color:${e}}}@@-ms-keyframes blink{from,to{color:transparent}50%{color:${e}}}@@-o-keyframes blink{from,to{color:transparent}50%{color:${e}}}\n`, i = t => { const e = document.createElement("style"); e.textContent = t, document.head.appendChild(e) }; document.currentScript.parentElement.parentElement.querySelectorAll("[typewriter]").forEach((e, i) => { const n = e.getAttribute("typewriter").split("|").map(t => t.trim()) || []; if (!n.length || "" == n[0]) return void console.error("Please insert some texts separated by |"); n.unshift(e.textContent), e.textContent = ""; const s = parseInt(e.getAttribute("period"), 10) || 1e3, r = e.getAttribute("cursor") || "|", o = e.getAttribute("color") || "black", l = parseInt(e.getAttribute("writing"), 10) || 200, a = parseInt(e.getAttribute("deleting"), 10) || 500; new t(e, i, n, s, r, o, l, a) }) }();
            </script>
        </div>
    </div>
}
<script src="js/jquery-3.5.1.min.dc5e7f18c8.js?site=64f029ee6e9bd2be3142d1d2" type="text/javascript" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script><script src="64f029ee6e9bd2be3142d1d2/js/webflow.c23b1b58f.js" type="text/javascript"></script>

<style type="text/css">
    .w-webflow-badge {
        display: none !important;
    }
</style>

@code {
    private Motivation motivation;

    protected override async Task OnInitializedAsync()
    {
        Random rndId = new Random();
        var id = rndId.Next(1, 501);
        var response = await Http.GetAsync($"Motivation/{id}");
        motivation = JsonConvert.DeserializeObject<Motivation>(await response.Content.ReadAsStringAsync());
    }
}
